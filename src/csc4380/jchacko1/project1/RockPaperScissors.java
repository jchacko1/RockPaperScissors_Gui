/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package csc4380.jchacko1.project1;


import java.awt.*;
import javax.swing.*;;
import java.io.*;
import javax.imageio.*;
import java.awt.image.BufferedImage;
import java.util.*;
/**
 *
 * @author admin
 */
public class RockPaperScissors extends javax.swing.JFrame {

    /**
     * Creates new form RockPaperScissors
     */
    public RockPaperScissors() {
        //for generated code
        initComponents();
        //for custom code
        myinitComponents();
        //sets window to center
        setLocationRelativeTo(null);
        setVisible(true);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        pnlResults = new javax.swing.JPanel();
        btnRock = new javax.swing.JButton();
        btnPaper = new javax.swing.JButton();
        btnScissors = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();
        pnlGame = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtGameResults = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JChacko1");
        setMinimumSize(new java.awt.Dimension(400, 400));

        pnlResults.setBackground(new java.awt.Color(0, 240, 240));

        btnRock.setText("Rock");
        btnRock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRockActionPerformed(evt);
            }
        });

        btnPaper.setText("Paper");
        btnPaper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaperActionPerformed(evt);
            }
        });

        btnScissors.setText("Scissors");
        btnScissors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScissorsActionPerformed(evt);
            }
        });

        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlResultsLayout = new javax.swing.GroupLayout(pnlResults);
        pnlResults.setLayout(pnlResultsLayout);
        pnlResultsLayout.setHorizontalGroup(
            pnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlResultsLayout.createSequentialGroup()
                .addComponent(btnRock)
                .addGap(185, 185, 185)
                .addGroup(pnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnPaper, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConfirm))
                .addGap(196, 196, 196)
                .addComponent(btnScissors)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlResultsLayout.setVerticalGroup(
            pnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlResultsLayout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(btnConfirm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRock)
                    .addComponent(btnPaper)
                    .addComponent(btnScissors))
                .addContainerGap())
        );

        getContentPane().add(pnlResults, java.awt.BorderLayout.PAGE_END);

        pnlGame.setMinimumSize(new java.awt.Dimension(200, 50));
        pnlGame.setPreferredSize(new java.awt.Dimension(200, 50));

        txtGameResults.setEditable(false);
        txtGameResults.setColumns(20);
        txtGameResults.setRows(5);
        txtGameResults.setText("Player  vs  Cpu");
        jScrollPane1.setViewportView(txtGameResults);

        javax.swing.GroupLayout pnlGameLayout = new javax.swing.GroupLayout(pnlGame);
        pnlGame.setLayout(pnlGameLayout);
        pnlGameLayout.setHorizontalGroup(
            pnlGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
        );
        pnlGameLayout.setVerticalGroup(
            pnlGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        getContentPane().add(pnlGame, java.awt.BorderLayout.NORTH);

        jMenu1.setText("File");

        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        jMenu1.add(mnuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_mnuExitActionPerformed

    private void btnRockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRockActionPerformed
        // TODO add your handling code here:
        
        //changes image to rock
        imgUserChoice = imgRock;
        //changes user's choice to rock
        stringUserChoice = "Rock";
        //repaints current image to the rock
        repaint();
        
    }//GEN-LAST:event_btnRockActionPerformed

    private void btnPaperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaperActionPerformed
        // TODO add your handling code here:
        imgUserChoice = imgPaper;
        stringUserChoice = "Paper";
        repaint();
    }//GEN-LAST:event_btnPaperActionPerformed

    private void btnScissorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScissorsActionPerformed
        // TODO add your handling code here:
        imgUserChoice = imgScissors;
        stringUserChoice = "Scissors";
        repaint();
    }//GEN-LAST:event_btnScissorsActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        // TODO add your handling code here:
        
        
        
        
        //gets cpu's choice
        cpuChoice();
        //gets the results of the match
        GameResults();
        
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void cpuChoice(){
        
        //randomly chooses number between [1-3]
        int intCpuChoice = 1 + (int)(Math.random() * ((3-1)+1));
        
        //1 is for rock, 2 paper, 3 scissors and paints the image for cpu's side
        if(intCpuChoice == 1){
            stringCpuChoice = "Rock";
            imgCpuChoice = imgRock;
            repaint();
        }
        if(intCpuChoice == 2){
            stringCpuChoice = "Paper";
            imgCpuChoice = imgPaper;
            repaint();
        }
        if(intCpuChoice == 3){
            stringCpuChoice = "Scissors";
            imgCpuChoice = imgScissors;
            repaint();
        }
        
        
        
        
    }
    
    //determines the game results
    private void GameResults(){
        if(stringUserChoice.equals(stringCpuChoice)){
            //puts results in a string and concat the previous history
            stringResults = txtGameResults.getText() + "\n You chose "+ stringUserChoice + " Cpu chose " + stringCpuChoice + ".    You tie. ";
            //Increments the number of times the game has been tied
            intTimesTied++;
        }
        if(stringUserChoice.equals("Rock") && stringCpuChoice.equals("Paper")){
            stringResults = txtGameResults.getText() + "\n You chose "+ stringUserChoice + " Cpu chose Paper.   You lose.";
 
            intTimesLost++;
        }
        if(stringUserChoice.equals("Rock") && stringCpuChoice.equals("Scissors")){
            stringResults = txtGameResults.getText() + "\n You chose "+ stringUserChoice + " Cpu chose Scissors.    You win.";
      
            intTimesWon++;
        }
        if(stringUserChoice.equals("Paper") && stringCpuChoice.equals("Rock")){
            stringResults = txtGameResults.getText() + "\n You chose "+ stringUserChoice + " Cpu chose Rock.    You win.";
 
            intTimesWon++;
        }
        if(stringUserChoice.equals("Paper") && stringCpuChoice.equals("Scissors")){
            stringResults = txtGameResults.getText() + "\n You chose "+ stringUserChoice + " Cpu chose Scissors.    You lose.";
    
            intTimesLost++;
        }
        if(stringUserChoice.equals("Scissors") && stringCpuChoice.equals("Rock")){
            stringResults = txtGameResults.getText() + "\n You chose "+ stringUserChoice + " Cpu chose Rock.    You lose.";
      
            intTimesLost++;
        }
        if(stringUserChoice.equals("Scissors") && stringCpuChoice.equals("Paper")){
            stringResults = txtGameResults.getText() + "\n You chose "+ stringUserChoice + " Cpu chose Paper.   You win.";
 
            intTimesWon++;
        }
        
        //posts the game results in the text area in the north
        txtGameResults.setText(stringResults + "    Score History: Won " + intTimesWon + " Tied " + intTimesTied +" Lost " + intTimesLost);
         
    }
    
    
    
    /**
     * @param args the command line arguments
     */

    private void myinitComponents(){
        
        
        //initializes custom panels
        pnlUserCanvas = new pnlUserCanvasClass();
        pnlCpuCanvas = new pnlCpuCanvasClass();
        

        this.getContentPane().add(pnlUserCanvas, BorderLayout.WEST);
        //puts user panel in west and cpu in east
        //this.getContentPane().add(pnlUserCanvas, BorderLayout.WEST);
        this.getContentPane().add(pnlCpuCanvas, BorderLayout.EAST);
        
    }
    
    
    
    
    
    //Sets up user's custom panel
    public class pnlUserCanvasClass extends JPanel {
    
        pnlUserCanvasClass(){
        setPreferredSize(new Dimension(296,160));
         
       
        setBackground(Color.cyan);
        setResizable(true);
        setVisible(true);
        
        //gets the image path from the src folder to each image for user
        try{
            imgRock = ImageIO.read(this.getClass().getResource("/images/rock.png"));
            imgPaper = ImageIO.read(this.getClass().getResource("/images/paper.png"));
            imgScissors = ImageIO.read(this.getClass().getResource("/images/scissors.png"));
        }
        catch(IOException ex){
            System.out.printf("Cant find image");
        }
     
   }

    
    //paints the image on the custom panel
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
       
        
        //Sets default image to rock
        if(imgUserChoice == null){
            try{
                imgUserChoice = ImageIO.read(this.getClass().getResource("/images/rock.png"));
                
            }
            catch(IOException ex){
                System.out.printf("Cant find image");
            }
        }
        
        g.drawImage(imgUserChoice, 0, 0, null);
        
        
           
           
       }
       
       
}
    //Same thing as pnlUserCanvasClass except for cpu's panel
    public class pnlCpuCanvasClass extends JPanel {
    
        pnlCpuCanvasClass(){
        setPreferredSize(new Dimension(296,160));
         

        setBackground(Color.cyan);
        setResizable(true);
        setVisible(true);

   }

    
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);

        g.drawImage(imgCpuChoice, 0, 0, null);
    
           
           
       }
       
       
}

    private String stringResults;
    private int intTimesWon = 0;
    private int intTimesLost = 0;
    private int intTimesTied = 0;
    private int intCpuChoice;
    private String stringCpuChoice;
    private Random rand;
    private JPanel pnlUserCanvas;
    private JPanel pnlCpuCanvas;
    private BufferedImage imgRock;
    private BufferedImage imgPaper;
    private BufferedImage imgScissors;
    private BufferedImage imgUserChoice;
    private BufferedImage imgCpuChoice;
    //sets default choice to rock
    private String stringUserChoice = "Rock";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnPaper;
    private javax.swing.JButton btnRock;
    private javax.swing.JButton btnScissors;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JPanel pnlGame;
    private javax.swing.JPanel pnlResults;
    private javax.swing.JTextArea txtGameResults;
    // End of variables declaration//GEN-END:variables
}
